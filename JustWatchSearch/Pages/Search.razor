@page "/"
@page "/title/{NodeId?}"
@page "/search"

@inject IJustwatchApiService _justWatchService
@inject NavigationManager _navigationManager

<PageTitle>JustWatch Search</PageTitle>

<div class="container mt-3">
	@if (!string.IsNullOrEmpty(errorMessage))
	{
		<div class="alert alert-danger alert-dismissible fade show" role="alert">
			<strong>Error:</strong> @errorMessage
			<button type="button" class="btn-close" @onclick="() => errorMessage = null" aria-label="Close"></button>
		</div>
	}

	@if (NodeId != null)
	{
		<button class="btn btn-secondary mb-3" @onclick="Goback" aria-label="Go back">Back</button>
		<JustWatchTitle Title="selectedTitle" NodeId="@NodeId" />
	}
	else if (searchResponse != null)
	{
		<h2>JustWatch Search</h2>

		<div class="input-group mb-3">
			<input type="text" class="form-control" @bind="SearchBoxInput" @bind:event="oninput"
				   placeholder="Enter movie/show title..." />
		</div>

		@if (!string.IsNullOrEmpty(SearchQueryParam))
		{
			<h3>Search Results</h3>
		}

		@if (searchResponse.Result.TitleResults.Any())
		{
			<div class="table-responsive">
				<table class="table table-striped table-hover">
					<thead>
						<tr>
							<th>Type</th>
							<th>Title</th>
							<th>Release Date</th>
							<th>IMDB</th>
							<th></th>
						</tr>
					</thead>
					<tbody>
						@foreach (var title in searchResponse.Result.TitleResults)
						{
							<tr>
								<td>@title?.Node?.ObjectType</td>
								<td>@title?.Node?.Content?.Title</td>
								<td>@GetReleaseInfo(title?.Node)</td>
								<td>
									@if (!string.IsNullOrEmpty(title?.Node?.Content?.ExternalIds?.ImdbId))
									{
										<a href="https://www.imdb.com/title/@title.Node.Content.ExternalIds.ImdbId" target="_blank">
											@title.Node.Content.ExternalIds.ImdbId
										</a>
									}
								</td>
								<td>
									<Button class="btn btn-primary btn-sm" @onclick="() => OpenMovie(title?.Node)">Prices</Button> 
									<a class="btn btn-primary btn-sm" target="_blank"
									   href="@($"https://www.justwatch.com{title?.Node?.Content?.FullPath}")">
										JustWatch
									</a>
								</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		}

		@if (string.IsNullOrEmpty(SearchQueryParam) && upcomingResponse != null && upcomingResponse.Result.TitleResults.Any())
		{
			<h3 class="mt-4">Upcoming Releases</h3>
			<div class="table-responsive">
				<table class="table table-striped table-hover">
					<thead>
						<tr>
							<th>Type</th>
							<th>Title</th>
							<th>Release Date</th>
							<th>IMDB</th>
							<th></th>
						</tr>
					</thead>
					<tbody>
						@foreach (var title in upcomingResponse.Result.TitleResults.Take(10))
						{
							<tr>
								<td>@title?.Node?.ObjectType</td>
								<td>@title?.Node?.Content?.Title</td>
								<td>@GetReleaseInfo(title?.Node)</td>
								<td>
									@if (!string.IsNullOrEmpty(title?.Node?.Content?.ExternalIds?.ImdbId))
									{
										<a href="https://www.imdb.com/title/@title.Node.Content.ExternalIds.ImdbId" target="_blank">
											@title.Node.Content.ExternalIds.ImdbId
										</a>
									}
								</td>
								<td>
									<Button class="btn btn-primary btn-sm" @onclick="() => OpenMovie(title?.Node)">Prices</Button> 
									<a class="btn btn-primary btn-sm" target="_blank"
									   href="@($"https://www.justwatch.com{title?.Node?.Content?.FullPath}")">
										JustWatch
									</a>
								</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		}

		@if (string.IsNullOrEmpty(SearchQueryParam) && popularResponse != null && popularResponse.Result.TitleResults.Any())
		{
			<h3 class="mt-4">Popular Movies & TV Shows</h3>
			<div class="table-responsive">
				<table class="table table-striped table-hover">
					<thead>
						<tr>
							<th>Type</th>
							<th>Title</th>
							<th>Release Date</th>
							<th>IMDB</th>
							<th></th>
						</tr>
					</thead>
					<tbody>
						@foreach (var title in popularResponse.Result.TitleResults.Take(10))
						{
							<tr>
								<td>@title?.Node?.ObjectType</td>
								<td>@title?.Node?.Content?.Title</td>
								<td>@GetReleaseInfo(title?.Node)</td>
								<td>
									@if (!string.IsNullOrEmpty(title?.Node?.Content?.ExternalIds?.ImdbId))
									{
										<a href="https://www.imdb.com/title/@title.Node.Content.ExternalIds.ImdbId" target="_blank">
											@title.Node.Content.ExternalIds.ImdbId
										</a>
									}
								</td>
								<td>
									<Button class="btn btn-primary btn-sm" @onclick="() => OpenMovie(title?.Node)">Prices</Button> 
									<a class="btn btn-primary btn-sm" target="_blank"
									   href="@($"https://www.justwatch.com{title?.Node?.Content?.FullPath}")">
										JustWatch
									</a>
								</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		}
	}
	else
	{
		<div class="d-flex justify-content-center mt-5">
			<div class="spinner-border text-primary" role="status">
				<span class="sr-only"></span>
			</div>
		</div>
	}
</div>

@code {
	[SupplyParameterFromQuery(Name = "q")]
	[Parameter]
	public string? SearchQueryParam { get; set; } = string.Empty;

	public string? SearchBoxInput
	{
		get => _searchQuery; set => _navigationManager.NavigateTo($"search?q={Uri.EscapeDataString(value ?? "")}");
	}

	private string? _searchQuery { get; set; }
	private SearchTitlesResponse? searchResponse;
	private SearchTitlesResponse? upcomingResponse;
	private SearchTitlesResponse? popularResponse;
	private TitleNode? selectedTitle;
	private string? errorMessage;

	private CancellationTokenSource? debounceCancellationToken;

	[Parameter]
	public string? NodeId { get; set; }

	protected override async Task OnInitializedAsync()
	{
		try
		{
			if (string.IsNullOrEmpty(NodeId))
			{
				await LoadDefaultContent();
			}
		}
		catch (Exception ex)
		{
			errorMessage = $"Initialization error: {ex.Message}";
			Console.Error.WriteLine($"Error in OnInitializedAsync: {ex}");
		}
	}

	protected override async Task OnParametersSetAsync()
	{
		try
		{
			var uri = new Uri(_navigationManager.Uri);
			var hasTitle = uri.Segments.Length > 1 && uri.Segments[1].TrimEnd('/') == "title";

			if (string.IsNullOrEmpty(NodeId))
			{
				if (_searchQuery != SearchQueryParam)
				{
					await SearchAsType(SearchQueryParam ?? "");
				}
			}
		}
		catch (Exception ex)
		{
			errorMessage = $"Error processing parameters: {ex.Message}";
			Console.Error.WriteLine($"Error in OnParametersSetAsync: {ex}");
		}
	}

	private async Task LoadDefaultContent()
	{
		try
		{
			errorMessage = null;
			
			// Load both upcoming and popular titles in parallel for better performance
			var upcomingTask = _justWatchService.GetUpcomingTitlesAsync();
			var popularTask = _justWatchService.GetPopularTitlesAsync();
			
			await Task.WhenAll(upcomingTask, popularTask);
			
			upcomingResponse = upcomingTask.Result;
			popularResponse = popularTask.Result;
			searchResponse = new SearchTitlesResponse(); // Initialize to show UI
			
			StateHasChanged();
		}
		catch (Exception ex)
		{
			errorMessage = $"Error loading default content: {ex.Message}";
			Console.Error.WriteLine($"Error in LoadDefaultContent: {ex}");
			searchResponse = new SearchTitlesResponse();
			StateHasChanged();
		}
	}

	private async Task SearchAsType(string query)
	{
		try
		{
			_searchQuery = SearchQueryParam;
			debounceCancellationToken?.Cancel();
			debounceCancellationToken = new CancellationTokenSource();
			await Task.Delay(100, debounceCancellationToken.Token);
			if (!debounceCancellationToken.Token.IsCancellationRequested)
			{
				await SearchMovies(query, debounceCancellationToken.Token);
			}
		}
		catch (TaskCanceledException)
		{
			// Expected when debouncing, can be ignored
		}
		catch (Exception ex)
		{
			errorMessage = $"Search error: {ex.Message}";
			Console.Error.WriteLine($"Error in SearchAsType: {ex}");
		}
	}

	private async Task SearchMovies(string query, CancellationToken? token = null)
	{
		try
		{
			errorMessage = null;
			
			if (string.IsNullOrWhiteSpace(query))
			{
				// If search is cleared, reload default content
				await LoadDefaultContent();
			}
			else
			{
				searchResponse = await _justWatchService.SearchTitlesAsync(query ?? "", token);
			}
			
			StateHasChanged();
		}
		catch (TaskCanceledException)
		{
			// Expected when user cancels, can be ignored
		}
		catch (InvalidOperationException ex)
		{
			errorMessage = ex.Message;
			Console.Error.WriteLine($"Error searching movies: {ex}");
			searchResponse = new SearchTitlesResponse();
			StateHasChanged();
		}
		catch (Exception ex)
		{
			errorMessage = $"An unexpected error occurred while searching: {ex.Message}";
			Console.Error.WriteLine($"Unexpected error in SearchMovies: {ex}");
			searchResponse = new SearchTitlesResponse();
			StateHasChanged();
		}
	}

	private void OpenMovie(TitleNode? title)
	{
		try
		{
			if (title is null)
			{
				Console.Error.WriteLine("OpenMovie called with null title");
				return;
			}

			if (string.IsNullOrWhiteSpace(title.Id))
			{
				errorMessage = "Cannot open movie: Invalid title ID";
				Console.Error.WriteLine("Title has null or empty ID");
				return;
			}

			selectedTitle = title;
			_navigationManager.NavigateTo($"title/{title.Id}");
		}
		catch (Exception ex)
		{
			errorMessage = $"Error opening movie: {ex.Message}";
			Console.Error.WriteLine($"Error in OpenMovie: {ex}");
		}
	}

	private void Goback()
	{
		try
		{
			selectedTitle = null;
			NodeId = null;
			_navigationManager.NavigateTo($"search?q={Uri.EscapeDataString(_searchQuery ?? "")}");
		}
		catch (Exception ex)
		{
			errorMessage = $"Error navigating back: {ex.Message}";
			Console.Error.WriteLine($"Error in Goback: {ex}");
		}
	}

	private string GetReleaseInfo(TitleNode? node)
	{
		if (node?.Content == null) return "N/A";
		
		if (!string.IsNullOrEmpty(node.Content.OriginalReleaseDate))
		{
			if (DateTime.TryParse(node.Content.OriginalReleaseDate, out var releaseDate))
			{
				var daysUntilRelease = (releaseDate - DateTime.UtcNow).Days;
				
				if (daysUntilRelease > 0)
				{
					return $"{releaseDate:MMM dd, yyyy} ({daysUntilRelease} days)";
				}
				else if (daysUntilRelease == 0)
				{
					return $"{releaseDate:MMM dd, yyyy} (Today!)";
				}
				else
				{
					return $"{releaseDate:MMM dd, yyyy}";
				}
			}
			
			return node.Content.OriginalReleaseDate;
		}
		
		if (node.Content.OriginalReleaseYear > 0)
		{
			return node.Content.OriginalReleaseYear.ToString();
		}
		
		return "N/A";
	}
}
