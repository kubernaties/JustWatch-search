@inject IJustwatchApiService _justWatchService

@if (!string.IsNullOrEmpty(errorMessage))
{
	<div class="alert alert-danger alert-dismissible fade show" role="alert">
		<strong>Error:</strong> @errorMessage
		<button type="button" class="btn-close" @onclick="() => errorMessage = null" aria-label="Close"></button>
	</div>
}

@if (Title != null && Title.Content != null)
{
	<div class="card mb-4">
		<div class="row g-0">
			<div class="col-md-4">
				<img src="https://images.justwatch.com/@Title.Content.PosterUrl" class="img-fluid rounded-start"
					 alt="Movie Poster" style="max-width: 150px;">
			</div>
			<div class="col-md-8">
				<div class="card-body">
					<h1 class="card-title">@Title.Content.Title (@Title.Content.OriginalReleaseYear)</h1>
					<p class="card-text">@Title.Content.ShortDescription</p>
				</div>
			</div>
		</div>
	</div>
}
@if (titleOffers != null)
{
	<div class="table-responsive">
		<Grid TItem="TitleOfferViewModel" AllowSorting="true" Class="table table-hover table-bordered table-striped"
			  DataProvider="OffersDataProvider" Responsive="true" AllowFiltering="true">
			<GridColumn TItem="TitleOfferViewModel" HeaderText="Service" PropertyName="PackageClearName" SortKeySelector="item => item.OfferDetails.Type">
				<a href="@context.PackageURL">@context.PackageClearName</a>
			</GridColumn>

			<GridColumn TItem="TitleOfferViewModel" HeaderText="Country" PropertyName="Country" SortKeySelector="item => item.Country">
				@context.Country
			</GridColumn>

			<GridColumn TItem="TitleOfferViewModel" HeaderText="Price" PropertyName="RetailPriceValue" SortKeySelector="item => item.RetailPriceValue">
				@context.RetailPrice
			</GridColumn>
			<GridColumn TItem="TitleOfferViewModel" HeaderText="USD price" PropertyName="NormalizedPrice" SortKeySelector="item => item.NormalizedPrice">
				$@context.NormalizedPrice
			</GridColumn>
			<GridColumn TItem="TitleOfferViewModel" HeaderText="Resolution"
						Filterable="true"
						PropertyName="PresentationType"
						FilterValue="HD"
						SortKeySelector="item => item.PresentationType">
				@context.PresentationType
			</GridColumn>

			<GridColumn TItem="TitleOfferViewModel" HeaderText="Monetization Type"
						PropertyName="MonetizationType"
						SortKeySelector="item => item.MonetizationType">
				@context.MonetizationType
			</GridColumn>
		</Grid>
	</div>
}
else
{
	<div class="d-flex justify-content-center my-4">
		<div class="spinner-border text-primary" role="status">
			<span class="sr-only"></span>
		</div>
	</div>
}

@code {
	[Parameter]
	public TitleNode? Title { get; set; }
	[Parameter]
	public string? NodeId { get; set; }
	private IEnumerable<TitleOfferViewModel>? titleOffers;
	private string? errorMessage;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			if (Title is null && NodeId is not null)
			{
				Title = await _justWatchService.GetTitle(NodeId);
			}

			if (Title is null)
			{
				errorMessage = "Title not found or invalid title ID";
				Console.Error.WriteLine($"Title is null for NodeId: {NodeId}");
				return;
			}

			if (Title.Content is null)
			{
				errorMessage = "Title content is not available";
				Console.Error.WriteLine($"Title.Content is null for NodeId: {NodeId}");
				return;
			}

			if (string.IsNullOrWhiteSpace(Title.Id))
			{
				errorMessage = "Invalid title ID";
				Console.Error.WriteLine("Title.Id is null or empty");
				return;
			}

			if (string.IsNullOrWhiteSpace(Title.Content.FullPath))
			{
				errorMessage = "Title path information is not available";
				Console.Error.WriteLine("Title.Content.FullPath is null or empty");
				return;
			}

			NodeId = Title.Id;
			titleOffers = await _justWatchService.GetAllOffers(Title.Id, Title.Content.FullPath);

			if (titleOffers == null)
			{
				errorMessage = "Failed to load offers for this title";
				Console.Error.WriteLine($"GetAllOffers returned null for NodeId: {NodeId}");
				titleOffers = Enumerable.Empty<TitleOfferViewModel>();
			}
		}
		catch (TaskCanceledException)
		{
			errorMessage = "Request was cancelled";
			Console.Error.WriteLine("OnInitializedAsync was cancelled");
		}
		catch (InvalidOperationException ex)
		{
			errorMessage = ex.Message;
			Console.Error.WriteLine($"Error in OnInitializedAsync: {ex}");
			titleOffers = Enumerable.Empty<TitleOfferViewModel>();
		}
		catch (Exception ex)
		{
			errorMessage = $"An unexpected error occurred: {ex.Message}";
			Console.Error.WriteLine($"Unexpected error in OnInitializedAsync: {ex}");
			titleOffers = Enumerable.Empty<TitleOfferViewModel>();
		}
	}

	private async Task<GridDataProviderResult<TitleOfferViewModel>> OffersDataProvider(GridDataProviderRequest<TitleOfferViewModel> request)
	{
		try
		{
			if (titleOffers == null)
			{
				return await Task.FromResult(request.ApplyTo(Enumerable.Empty<TitleOfferViewModel>()));
			}
			return await Task.FromResult(request.ApplyTo(titleOffers));
		}
		catch (Exception ex)
		{
			errorMessage = $"Error loading offers data: {ex.Message}";
			Console.Error.WriteLine($"Error in OffersDataProvider: {ex}");
			return await Task.FromResult(request.ApplyTo(Enumerable.Empty<TitleOfferViewModel>()));
		}
	}
}
